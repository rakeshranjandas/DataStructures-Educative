package modified_binary_search;

import java.util.ArrayList;
import java.util.List;

/**
 * Find the nearest number to target, then explore to left and right and find k
 * closest.
 * 
 * Time complexity:
 * Finding nearest number to target = O(log n)
 * Explore k numbers = O(k)
 * Total = O(log n + k)
 * 
 * Space complexity:
 * For storing the output = O(k)
 * 
 * Corner cases:
 * 1) when target < nums[0]
 * 2) when target > nums[len-1]
 */

public class FindKClosestElements {

    private static int getNearestIndex(int[] nums, int target) {
        int lo = 0, hi = nums.length, mid;
        while (hi - lo > 1) {
            mid = (lo + hi) / 2;
            if (nums[mid] < target)
                lo = mid;
            else
                hi = mid;
        }

        return nums[hi] - target > target - nums[lo] ? lo : hi;
    }

    public static List<Integer> findClosestElements(int[] nums, int k, int target) {
        int len = nums.length;
        int l, r;

        if (target <= nums[0]) {
            l = 0;
            r = k - 1;

        } else if (target >= nums[len - 1]) {
            l = len - k;
            r = len - 1;

        } else {
            int nearestIndex = getNearestIndex(nums, target);
            l = nearestIndex;
            r = nearestIndex;

            for (int i = 0; i < k - 1; i++) {
                if (l - 1 < 0) {
                    r++;

                } else if (r + 1 >= len) {
                    l--;

                } else if (Math.abs(nums[l - 1] - target) <= Math.abs(nums[r + 1] - target)) {
                    l--;

                } else {
                    r++;
                }

            }

        }

        List<Integer> res = new ArrayList<>();
        for (int i = l; i <= r; i++) {
            res.add(nums[i]);
        }

        return res;
    }

    public static void main(String[] args) {
        int nums[] = new int[] { -10000, -9987, -9984, -9976, -9973, -9970, -9849, -9838, -9789, -9747, -9697, -9684,
                -9666, -9663, -9628, -9626, -9537, -9526, -9438, -9435, -9394, -9332, -9321, -9240, -9181, -9118, -9076,
                -9073, -9043, -9032, -9032, -9023, -8967, -8929, -8896, -8885, -8864, -8838, -8818, -8805, -8767, -8681,
                -8664, -8633, -8557, -8540, -8534, -8534, -8402, -8327, -8303, -8281, -8271, -8227, -8188, -8112, -8090,
                -8069, -8056, -8052, -7984, -7978, -7891, -7889, -7884, -7854, -7838, -7774, -7714, -7678, -7480, -7467,
                -7440, -7435, -7411, -7303, -7294, -7273, -7269, -7256, -7252, -7235, -7232, -7221, -7212, -7189, -7175,
                -7167, -7116, -7086, -7079, -7065, -7059, -7054, -7032, -7018, -7016, -6869, -6866, -6862, -6848, -6845,
                -6824, -6824, -6809, -6788, -6787, -6754, -6725, -6688, -6684, -6681, -6679, -6600, -6597, -6579, -6555,
                -6539, -6526, -6491, -6465, -6455, -6227, -6203, -6189, -6080, -6074, -6044, -6023, -6005, -5953, -5945,
                -5900, -5896, -5865, -5830, -5787, -5761, -5661, -5654, -5633, -5626, -5604, -5483, -5422, -5358, -5328,
                -5322, -5313, -5310, -5286, -5264, -5218, -5139, -5139, -5128, -5086, -5081, -5043, -5011, -5000, -4969,
                -4921, -4906, -4901, -4901, -4883, -4780, -4697, -4688, -4681, -4673, -4542, -4504, -4501, -4489, -4463,
                -4361, -4342, -4340, -4266, -4164, -4148, -4034, -3991, -3890, -3877, -3771, -3770, -3770, -3742, -3738,
                -3720, -3633, -3615, -3598, -3518, -3508, -3444, -3408, -3402, -3304, -3251, -3246, -3172, -3136, -3130,
                -3108, -3081, -3076, -3041, -3025, -3000, -2964, -2950, -2937, -2925, -2912, -2750, -2745, -2588, -2587,
                -2584, -2582, -2575, -2572, -2538, -2516, -2419, -2365, -2344, -2311, -2253, -2229, -2197, -2188, -2177,
                -2143, -2123, -2052, -2024, -2024, -1965, -1898, -1884, -1844, -1828, -1821, -1811, -1730, -1670, -1657,
                -1636, -1603, -1528, -1504, -1489, -1484, -1444, -1355, -1350, -1228, -1086, -916, -761, -666, -618,
                -617, -567, -543, -491, -471, -395, -361, -338, -279, -238, -99, -91, -72, -23, -17, -13, -7, 4, 13,
                126, 137, 153, 237, 314, 436, 571, 706, 778, 808, 813, 831, 892, 924, 974, 1004, 1027, 1030, 1056, 1076,
                1098, 1116, 1213, 1250, 1277, 1294, 1339, 1348, 1372, 1487, 1510, 1575, 1649, 1713, 1856, 1912, 1969,
                1987, 2033, 2041, 2059, 2089, 2113, 2153, 2173, 2221, 2282, 2353, 2361, 2393, 2425, 2447, 2571, 2616,
                2719, 2782, 2804, 2834, 2852, 2874, 2891, 2954, 2972, 3052, 3059, 3075, 3085, 3118, 3177, 3198, 3251,
                3266, 3278, 3370, 3374, 3399, 3417, 3459, 3472, 3492, 3525, 3529, 3563, 3663, 3670, 3672, 3677, 3701,
                3735, 3746, 3788, 3789, 3828, 3858, 3859, 3869, 3904, 4039, 4082, 4097, 4122, 4239, 4289, 4296, 4329,
                4339, 4348, 4367, 4485, 4494, 4605, 4637, 4652, 4703, 4780, 4799, 4841, 4847, 4876, 4896, 4949, 4950,
                4952, 4961, 5001, 5191, 5191, 5345, 5368, 5371, 5377, 5385, 5402, 5452, 5476, 5492, 5496, 5506, 5617,
                5668, 5708, 5715, 5782, 5838, 5969, 5990, 5994, 6069, 6110, 6116, 6138, 6181, 6202, 6206, 6241, 6267,
                6331, 6353, 6368, 6395, 6461, 6487, 6516, 6600, 6611, 6635, 6676, 6695, 6698, 6716, 6724, 6733, 6747,
                6758, 6781, 6900, 7093, 7098, 7228, 7234, 7267, 7307, 7315, 7323, 7364, 7372, 7382, 7413, 7479, 7480,
                7505, 7552, 7568, 7590, 7632, 7660, 7728, 7757, 7866, 7921, 7924, 7964, 8032, 8088, 8162, 8168, 8199,
                8210, 8222, 8353, 8392, 8396, 8460, 8471, 8473, 8528, 8566, 8612, 8688, 8695, 8742, 8756, 8765, 8843,
                8849, 8859, 8899, 8921, 8921, 8996, 9006, 9010, 9021, 9025, 9073, 9107, 9152, 9188, 9195, 9253, 9340,
                9369, 9381, 9404, 9438, 9446, 9447, 9461, 9465, 9466, 9518, 9537, 9620, 9634, 9641, 9720, 9730, 9867,
                9870, 9913, 9932, 9979, 9985, 10000 };
        int target = 7728;
        int k = 313;
        System.out.println(findClosestElements(nums, k, target));
    }
}
